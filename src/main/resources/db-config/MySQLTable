##------------생성할때 쓰이는 구문----------------------
##데이터베이스, 계정 project 생성, 권한부여-----------------

create database project character set utf8;

create user 'project' identified by 'project';

grant all privileges on project.* to 'project';

##------------- 다른 IP로 접속시(테이블 생성금지) ----------
## hostname = tigerwhale.csvjhkqjo50q.ap-northeast-2.rds.amazonaws.com
## username = project
## password = project

##-----------------------------------------






## 테이블 목록
## 추가된 테이블이 또는 상세내용이 적혀있지 않은 테이블에는 테이블 사용자가 직접 수정해주세요 = > 마지막에 erd관계도 수정과 , 테이블 생성문 가독성을 높이기위함

## 1. USERBOARD -- CONFIRM
## 2. MENTORBOARD -- CONFIRM
## 3. CAREERBOARD -- CONFIRM
## 4. DETAILBOARD -- CONFIRM
## 5. INTERESTBOARD -- CONFIRM
## 6. MAINBOARD -- CONFIRM
## 7. V_R_Board -- CONFIRM
## 8. Y_M_BOARD -- CONFIRM
## 9. D_T_BOARD -- CONFIRM
## 10. CUSTOMERBOARD --CONFIRM
## 11. REPLYBOARD -- CONFIRM
## 12. CATEGORYBOARD -- CONFIRM
## 13. IMGBOARD -- CONFIRM
## 14. TEXTBOARD -- CONFIRM
## 15. FAQBOARD -- CONFIRM
## 16. SEQ_MYSQL -- CONFIRM
 

##--------------------1. USERBOARD----------------------------------
## 회원가입시 데이터를 저장하게되는 테이블입니다

CREATE TABLE USERBOARD
(
    user_ID VARCHAR(40) PRIMARY KEY, ##아이디
    user_PW VARCHAR(40) NOT NULL, ## 비밀번호
    userAdress VARCHAR(100)NOT NULL, ## 주소
    userPhoneNumber VARCHAR(60)NOT NULL, ## 핸드폰 번호
    userEmail1 VARCHAR(50)NOT NULL, ## 이메일 앞부분 ex)aaaaa@naver.com
    userEmail2 VARCHAR(50)NOT NULL, ## 이메일 뒷부분
    userGender VARCHAR(6)NOT NULL, ## 성별 
    buyScore_AVG int(3), ## 회원이 구매를하면서 판매자에게 받게된 평점의 총합 ( 변수명이 total,sum같은것이 아닌이유는 추후수정으로 오류발생을 피하기위해서 입니다) ( 회원평점의 총합 / scoreCount) = > 회원의 평점을 가져오기 위함입니다 
    la float, ## 회원 주소의 위도값 ( 카카오맵에 사용하는 값입니다 )
    ma float, ## 회원 주소의  경도값 ( 카카오맵에 사용하는 값입니다 )
    user_IMG VARCHAR(40)
);

##-------------------------------------------------------------------


##--------------2. MENTORBOARD -------------------------------------
## 회원이 판매자로서 활동하기 위해 데이터가 저장되는 테이블 입니다.

CREATE TABLE MENTORBOARD
(
    user_ID VARCHAR(20) NOT NULL, ## 회원의 아이디
    accountNum VARCHAR(20)UNIQUE NOT NULL, ## 회원의 계좌번호 ( 결제를했을경우 해당계좌로 금액을 받습니다)
    sellScore_AVG INT(3) ## 회원이 판매를하면서 구매자에게 받은 평점의 총합 ( 변수명이 total,sum같은것이 아닌이유는 추후수정으로 오류발생을 피하기위해서 입니다) ( 회원평점의 총합 / scoreCount) = > 회원의 평점을 가져오기 위함입니다
);

##-------------------------------------------------------------------


##-----------3. CAREERBOARD -----------------------------------
## 회원이 판매자로서 자신의 경력을 올리고싶을때 그경력을 저장하는 테이블입니다.

CREATE TABLE CAREERBOARD
(
    user_ID VARCHAR(20) NOT NULL, ## 회원의 아이디
    careerList VARCHAR(100) UNIQUE NOT NULL ## 회원의 경력사항입니다 .
);

##-----------------------------------------------------------------



##----------- 4 . DETAILBOARD -----------------
## 회원의 결제내역 테이블입니다 / 구매내역 판매내역 모두 확인가능합니다.

CREATE TABLE DETAILBOARD
(
    orderNum INT(10) PRIMARY KEY AUTO_INCREMENT, ##주문 번호 (시퀀스값으로 값이 할당됩니다.)
    sell_ID VARCHAR(10) NOT NULL, ##해당 bno에서 일어난 거래의 구매아이디
    buy_ID VARCHAR(20) NOT NULL, ##해당 bno에서 일어난 거래의 판매아이디
    bno INT(10) UNIQUE NOT NULL,
    price INT(10) NOT NULL, ##판매가
    sellScore INT(3), ##구매자가 판매자에게 주는평점
    buyScore INT(3) ##판매자가 구매자에게 주는평점
);

##--------------------------------------------------------------------

 

##-----------------5. INTERESTBOARD -----------------------
## 회원의 관심 카테고리를 저장한 테이블 입니다

CREATE TABLE INTERESTBOARD
(
    user_ID VARCHAR(20) NOT NULL, ##아이디
    c_code INT(5) NOT NULL ##카테고리의 키번호 (해당카테고리 번호를통해 대분류 중분류 소분류 의 값이 무엇인지 알수 있습니다)
);

##--------------------------------------------------------------------


##----------------------- 6. MAINBOARD ------------------------------------
## 게시글 입니다

CREATE TABLE MAINBOARD
(
    bno INT(10) PRIMARY KEY, ## 게시글 번호
    user_ID VARCHAR(4000) NOT NULL, ## 게시글 작성자 아이디
    c_code INT(5) NOT NULL, ## 게시글의 카테고리 유형 (해당카테고리 번호를통해 대분류 중분류 소분류 의 값이 무엇인지 알수 있습니다)
    boardType VARCHAR(4000) NOT NULL, ## 게시글의 종류를 확인함 입력값은'구매','판매' 
    title VARCHAR(4000) NOT NULL, ## 게시글의 제목
    text VARCHAR(4000) NOT NULL, ## 게시글의 내용
    price INT(10) NOT NULL, ## 게시글의 판매 금액
    M_registDate DATETIME DEFAULT CURRENT_TIMESTAMP, ## 게시글등록 시간
    M_updateDate DATETIME DEFAULT CURRENT_TIMESTAMP ## 게시글수정 시간
);


##-------------------------------------------------------------------------


##-------------------------- 7. V_R_BOARD(추천,조회) ---------------------------------
##게시글의 추천수/조회수를 기록한 테이블입니다
##Trigger 생성 조건 때문에 불필요한 칼럼이 많은상태입니다. 추천수,조회수 MAINBOARD로 합치면 트리거랑함께 삭제 가능한 테이블 입니다 ( 처음에 오류날줄알고 mainBoard의 수정없이 테이블을 하나더만들었씁니다) 

CREATE TABLE V_R_BOARD
(
    bno INT ,
    user_ID VARCHAR(20) NOT NULL,
    c_code INT NOT NULL,
    boardType VARCHAR(6) NOT NULL, 
    title VARCHAR(30) NOT NULL,
    text VARCHAR(500) NOT NULL,
    price INT NOT NULL,
    M_registDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    M_updateDate DATETIME DEFAULT CURRENT_TIMESTAMP, ## BNO부터 여기까지 MAINBOARD와 값이 동일합니다.
    recomendNum INT DEFAULT 0, ## 게시글 추천수
    viewNum INT DEFAULT 0 ## 게시글 조회수
);


##--------------------------------------------------------------------------


##------------------------- 8. Y_M_BOARD (게시글 작성자의 허용한시간 관련) -----------------------------------
##게시글의 작성자가 허용한 날짜와 시간대를 저장하는 테이블
CREATE TABLE Y_M_BOARD
(
    bno INT(20) NOT NULL,
    rno INT(20) unique NOT NULL ,
    M_time1 INT(20), ## 00:00 중 첫번째값 입력받음
    M_time2 INT(20), ## 00::00중 두번째값 입력받음

    Money INT(20), ## 돈
    addrBasic VARCHAR(4000),
    addrDetail VARCHAR(4000),
    day1 VARCHAR(800), ## 허용기간이 시작되는 년도를 입력받음
    day2 VARCHAR(800),

    exText VARCHAR(4000),
    entX VARCHAR(4000),
    entY VARCHAR(4000)

);

##------------------------ 9. D_T_BOARD -------------------------------------
create TABLE D_T_BOARD
(
   bno INT(20) NOT NULL,
   rno INT(20) NOT NULL,
   M_day VARCHAR(4000)
);


##------------------------ 10. CUSTOMERBOARD ------------------------------------- 
CREATE TABLE CUSTOMERBOARD
(
	BNO INT(20) NOT NULL,
	RNO INT(20) NOT NULL,
	MONEY INT(20) NOT NULL,
	USER_ID VARCHAR(4000) NOT NULL,
	SELLDAY DATETIME DEFAULT CURRENT_TIMESTAMP
);



##------------------------ 11. REPLYBOARD ------------------------------------- 
##댓글과 관련된 정보가 저장되는 테이블 입니다

CREATE TABLE REPLYBOARD
(
    user_ID VARCHAR(20) NOT NULL, ## 댓글 작성자 아이디
    bno INT(10) NOT NULL, ## 댓글달린 게시글의 번호
    orderNum INT(10) NOT NULL, ## 거래내역의 고유번호 (댓글과 거래내역 테이블의 외래키 역할을 합니다)
    reply VARCHAR(200) NOT NULL, ## 답글 내용
    R_replyDate DATETIME DEFAULT CURRENT_TIMESTAMP, ## 답글생성 시간
    R_updateDate DATETIME DEFAULT CURRENT_TIMESTAMP ## 답글수정 시간
);

##------------------------ 12.CATEGORYBOARD ----------------------------------
##카테고리의 대분류 중분류 소분류를 하나의 번호로 저장하는 테이블

CREATE TABLE CATEGORYBOARD
(
    c_code INT(5) UNIQUE NOT NULL AUTO_INCREMENT, ##해당행의 코드번호(고유값)
    middleCategory VARCHAR(60) NOT NULL, ## 중분류명
    smallCategory VARCHAR(60) NOT NULL, ## 소분류명
    bigCategory VARCHAR(60) NOT NULL ## 대분류명
);

##-----------------------------------------------------------------------------

##------------------------------ 13. IMGBOARD --------------------------------
##해당 게시글의 게시된 img파일의 이름을 저장하고 있는 테이블 입니다

create TABLE IMGBOARD
(
   bno INT(10) NOT NULL,
   img VARCHAR(60)
);

##----------------------------------------------------------------------------

##---------------------------------------------------------------------------

##----------------------------14.TEXTBOARD------------------------------
##설명 1,2,3
create TABLE TEXTBOARD
(
   bno INT(20) NOT NULL,
   text1 VARCHAR(4000) ,
   text2 VARCHAR(4000) ,
   text3 VARCHAR(4000) 
);

##--------------------------------------------------------------------------

##---------------------------15.FAQBOARD------------------------------
## FAQBOARD테이블 생성 쿼리
create table FAQBOARD(
    bno INT(10) PRIMARY KEY AUTO_INCREMENT,
    title varchar(200) not null,
    writer varchar(200) not null,
    content varchar(4000) not null,
    regdate DATETIME DEFAULT CURRENT_TIMESTAMP,
    updatedate DATETIME DEFAULT CURRENT_TIMESTAMP
);

##-----------------------------------------------------------------------------

##----------------------------16. 시퀀스 테이블------------------------

CREATE TABLE SEQ_MYSQL(
	id INT NOT NULL,
	seq_name VARCHAR(50) NOT NULL
);


INSERT INTO SEQ_MYSQL
VALUES (0, 'bno');

INSERT INTO SEQ_MYSQL
VALUES (0, 'rno');


##---------------MAINBOARD, Y_M_BOARD사용 시퀀스-----------
##----workbench에서 project데이터베이스 하위항목 'function' 선택후 create 실행------------

CREATE DEFINER=`project`@`%` FUNCTION GET_SEQ (p_seq_name VARCHAR(45))
RETURNS INT READS SQL DATA
BEGIN
DECLARE RESULT_ID INT;
UPDATE SEQ_MYSQL SET id = LAST_INSERT_ID(id+1)
WHERE seq_name = p_seq_name;
SET RESULT_ID = (SELECT LAST_INSERT_ID());
RETURN RESULT_ID;
END;
##----------------------------------------------------------------------

##-------------- RADIANS 함수 생성------------
##-----workbench에서 project데이터베이스 하위항목 'function' 선택후 create 실행해서 입력-------

CREATE DEFINER=`project`@`%` FUNCTION `RADIANS`(nDegrees DOUBLE) RETURNS double
    DETERMINISTIC
BEGIN

RETURN nDegrees / 57.29577951308232087679815481410517033235;
END


##== 생성시 발동트리거문--------------------------------------

DELIMITER $$

create DEFINER = project@'%' trigger TRIGGER_BACKUP_MAINBOARD
    after insert
    on MAINBOARD
    FOR EACH ROW
BEGIN

    INSERT INTO 
                V_R_BOARD(
                            BNO,
                            USER_ID,
                            C_CODE,
                            BOARDTYPE,
                            TITLE,
                            TEXT,
                            PRICE,
                            M_REGISTDATE,
                            M_UPDATEDATE
                          ) 
        VALUES( 
                NEW.BNO,
                NEW.USER_ID,
                NEW.C_CODE,
                NEW.BOARDTYPE,
                NEW.TITLE,
                NEW.TEXT,
                NEW.PRICE,
                NEW.M_REGISTDATE,
                NEW.M_UPDATEDATE
               );
end $$

create DEFINER = project@'%' trigger TRIGGER_DELETE_MAINBOARD
    after delete
    on MAINBOARD
    FOR EACH ROW
BEGIN
    delete from V_R_BOARD where BNO = OLD.BNO;
end $$

DELIMITER ;

##=========================================================

